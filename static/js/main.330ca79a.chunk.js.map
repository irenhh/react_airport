{"version":3,"sources":["getData.js","DepartureTable.js","ArrivalTable.js","Tabs.js","Schedule.js","App.js","serviceWorker.js","index.js"],"names":["currentDate","Date","toLocaleDateString","replace","getData","fetch","concat","then","response","json","DepartureTable","props","_props$departure","departure","terminal","term","timeDepShedule","destination","status","codeShareData","getTime","flights","map","item","codeShare","airlines","airline","en","name","initialTime","localTime","slice","react_default","a","createElement","i","key","ArrivalTable","_props$arrival","arrival","timeToStand","Tabs","state","tabShown","dayOfFlight","string","initialHour","String","getHours","modifiedHour","length","localMinute","match","changeTab","tab","_this","setState","changeDay","day","modifyFlightsByDate","date","array","filter","flight","getDate","_this2","this","_this$props","departuresToShow","arrivalsToShow","departuresSorted","Object","toConsumableArray","sort","b","localeCompare","arrivalsSorted","departuresByDate","arrivalsByDate","className","onClick","src_DepartureTable","ID","src_ArrivalTable","React","Component","Schedule","departures","arrivals","filterInput","componentDidMount","result","body","objectSpread","getInputData","event","target","value","preventDefault","prevState","updatedDepartures","updatedArrivals","toLowerCase","search","_this$state","onSubmit","type","placeholder","onChange","src_Tabs","App","src_Schedule","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.330ca79a.chunk.js","sourcesContent":["const currentDate = new Date().toLocaleDateString('ru-RU').replace(/\\./g, '-');\n\nexport const getData = () => {\n  return fetch(`https://api.iev.aero/api/flights/${currentDate}`)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction DepartureTable(props) {\n  const {\n    term: terminal,\n    timeDepShedule,\n    'airportToID.city_en': destination,\n    status,\n    codeShareData,\n  } = props.departure;\n\n  const { getTime } = props;\n\n  const flights = codeShareData.map(item => item.codeShare);\n  const airlines = codeShareData.map(item => item.airline.en.name);\n\n  const initialTime = getTime(timeDepShedule);\n  const localTime = initialTime[0] === '0' ? initialTime.slice(1) : initialTime;\n\n  return (\n    <tr>\n      <td>{terminal}</td>\n      <td>{localTime}</td>\n      <td>{destination}</td>\n      <td>{status}</td>\n      <td>{airlines.map((item, i) => <p key={i}>{item}</p>)}</td>\n      <td>{flights.map((item, i) => <p key={i}>{item}</p>)}</td>\n    </tr>\n  );\n}\n\nDepartureTable.propTypes = {\n  getTime: PropTypes.func.isRequired,\n\n  departure: PropTypes.shape({\n    term: PropTypes.string,\n    timeDepShedule: PropTypes.string,\n    'airportToID.city_en': PropTypes.string,\n    status: PropTypes.string,\n    codeShareData: PropTypes.array,\n  }).isRequired,\n};\n\nexport default DepartureTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ArrivalTable(props) {\n  const {\n    term: terminal,\n    timeToStand,\n    'airportFromID.city_en': destination,\n    status,\n    codeShareData,\n  } = props.arrival;\n\n  const { getTime } = props;\n\n  const flights = codeShareData.map(item => item.codeShare);\n  const airlines = codeShareData.map(item => item.airline.en.name);\n  \n  const initialTime = getTime(timeToStand);\n  const localTime = initialTime[0] === '0' ? initialTime.slice(1) : initialTime;\n\n  return (\n    <tr>\n      <td>{terminal}</td>\n      <td>{localTime}</td>\n      <td>{destination}</td>\n      <td>{status}</td>\n      <td>{airlines.map(item => <p>{item}</p>)}</td>\n      <td>{flights.map(item => <p>{item}</p>)}</td>\n    </tr>\n  );\n}\n\nArrivalTable.propTypes = {\n  getTime: PropTypes.func.isRequired,\n\n  arrival: PropTypes.shape({\n    term: PropTypes.string,\n    timeToStand: PropTypes.string,\n    'airportFromID.city_en': PropTypes.string,\n    status: PropTypes.string,\n    codeShareData: PropTypes.array,\n  }).isRequired,\n};\n\nexport default ArrivalTable;\n","import React from 'react';\nimport DepartureTable from './DepartureTable';\nimport ArrivalTable from './ArrivalTable';\n\nclass Tabs extends React.Component {\n  state = {\n    tabShown: 'departures',\n    dayOfFlight: 'today',\n  }\n\n  getTime = (string) => {\n    const initialHour = String(new Date(string).getHours());\n    const modifiedHour = ((initialHour).length < 2) ? `0${initialHour}` : `${initialHour}`;\n    \n    const localMinute = string.match(/(?<=:)\\d\\d(?!Z)/);\n\n    return `${modifiedHour}:${localMinute}`;\n  }\n\n  changeTab = (tab) => this.setState({ tabShown: tab });\n\n  changeDay = (day) => this.setState({ dayOfFlight: day });\n\n  modifyFlightsByDate = (date, array) => {\n    switch (date) {\n      case 'yesterday':\n        return array.filter(flight => new Date(flight.timeDepShedule || flight.timeToStand).getDate() === (new Date().getDate() - 1));\n\n      default:\n      case 'today':\n        return array.filter(flight => new Date(flight.timeDepShedule || flight.timeToStand).getDate() === new Date().getDate());\n\n      case 'tomorrow':\n        return array.filter(flight => new Date(flight.timeDepShedule || flight.timeToStand).getDate() === (new Date().getDate() + 1));\n    }\n  }\n\n  render() {\n    const { departuresToShow, arrivalsToShow } = this.props;\n\n    const columnNames = ['Terminal', 'Local time', 'Destination', 'Status', 'Airline', 'Flight'];\n\n    const departuresSorted = [...departuresToShow]\n      .sort((a, b) => this.getTime(a.timeDepShedule).localeCompare(this.getTime(b.timeDepShedule)));\n\n    const arrivalsSorted = [...arrivalsToShow]\n      .sort((a, b) => this.getTime(a.timeToStand).localeCompare(this.getTime(b.timeToStand)));\n\n    const departuresByDate = this.modifyFlightsByDate(this.state.dayOfFlight, departuresSorted);\n    const arrivalsByDate = this.modifyFlightsByDate(this.state.dayOfFlight, arrivalsSorted);\n\n    return (\n      <div className=\"tabs\">\n        <ul className=\"tabs__list\">\n          <li\n            className={`\n            tabs__list-item\n            ${this.state.tabShown === 'departures'\n              ? 'tabs__list-item--active'\n              : ''\n            }\n          `}\n            onClick={() => this.changeTab('departures')}\n          >\n            Departures\n          </li>\n\n          <li\n            className={`\n              tabs__list-item\n              ${this.state.tabShown === 'arrivals'\n                ? 'tabs__list-item--active'\n                : ''\n              }\n            `}\n\n            onClick={() => this.changeTab('arrivals')}\n          >\n            Arrivals\n          </li>\n        </ul>\n\n        <div className=\"tabs__content\">\n          <div className=\"tabs__content-day\">\n            <button\n              className={this.state.dayOfFlight === 'yesterday' ? 'day-active' : ''}\n              onClick={() => this.changeDay('yesterday')}\n            >\n              Yesterday\n            </button>\n\n            <button\n              className={this.state.dayOfFlight === 'today' ? 'day-active' : ''}\n              onClick={() => this.changeDay('today')}\n            >\n              Today\n            </button>\n\n            <button\n              className={this.state.dayOfFlight === 'tomorrow' ? 'day-active' : ''}\n              onClick={() => this.changeDay('tomorrow')}\n            >\n              Tomorrow\n            </button>\n          </div>\n\n          <table>\n            <thead>\n              <tr>\n                {columnNames.map(item => (\n                  <th key={item}>{item}</th>\n                ))}\n              </tr>\n            </thead>\n\n            <tbody>\n              {this.state.tabShown === 'departures' && departuresByDate.map((departure) => (\n                <DepartureTable\n                  key={departure.ID}\n                  departure={departure}\n                  getTime={this.getTime}\n                />\n              ))}\n\n              {this.state.tabShown === 'arrivals' && arrivalsByDate.map((arrival) => (\n                <ArrivalTable\n                  key={arrival.ID}\n                  arrival={arrival}\n                  getTime={this.getTime}\n                />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Tabs;\n","import React from 'react';\nimport { getData } from './getData';\nimport Tabs from './Tabs';\n\n\nclass Schedule extends React.Component {\n  state = {\n    departures: [],\n    departuresToShow: [],\n    arrivals: [],\n    arrivalsToShow: [],\n    filterInput: '',\n  }\n\n  componentDidMount = () => {\n    getData().then(result => {\n      const departures = result.body.departure.map(item => (\n        {\n          ...item,\n        }\n      ));\n\n      const arrivals = result.body.arrival.map(item => (\n        {\n          ...item,\n        }\n      ));\n\n      this.setState({\n        departures,\n        departuresToShow: departures,\n        arrivals,\n        arrivalsToShow: arrivals,\n      })\n    });\n  }\n\n  getInputData = (event) => {\n    this.setState({\n      filterInput: event.target.value,\n    })\n  }\n\n  filter = (event) => {\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      let updatedDepartures = prevState.departures;\n      let updatedArrivals = prevState.arrivals;\n\n      updatedDepartures = updatedDepartures.filter((item) => {\n        const dataToFilter = (\n          item['airportToID.city_en']\n          + item.codeShareData.map(airline => airline.airline.en.name)\n          + item.codeShareData.map(flight => flight.codeShare)\n        );\n\n        return dataToFilter.toLowerCase().search(\n          prevState.filterInput.toLowerCase()\n        ) !== -1;\n      });\n\n      updatedArrivals = updatedArrivals.filter((item) => {\n        const dataToFilter = (\n          item['airportFromID.city_en']\n          + item.codeShareData.map(airline => airline.airline.en.name)\n          + item.codeShareData.map(flight => flight.codeShare)\n        );\n\n        return dataToFilter.toLowerCase().search(\n          prevState.filterInput.toLowerCase()\n        ) !== -1;\n      });\n\n      return {\n        departuresToShow: updatedDepartures,\n        arrivalsToShow: updatedArrivals\n      };\n    });\n  }\n\n  render() {\n    const { departuresToShow, arrivalsToShow } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">Search flight</h1>\n\n        <form className=\"App__search\" onSubmit={this.filter}>\n          <input\n            type=\"text\"\n            placeholder=\"Airline, destination or flight #\"\n            className=\"App__search-input\"\n            onChange={this.getInputData}\n          />\n\n          <button\n            type=\"button\"\n            className=\"App__search-button\"\n            onSubmit={this.filter}\n          >\n            Search\n          </button>\n        </form>\n\n        {(departuresToShow.length > 0 && arrivalsToShow.length > 0) && (\n          <Tabs\n            departuresToShow={departuresToShow}\n            arrivalsToShow={arrivalsToShow}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Schedule;\n","import React from 'react';\nimport './App.css';\nimport Schedule from './Schedule';\n\nfunction App() {\n  return (\n    <Schedule />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets;\n      // see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost.\n        // Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}